import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { AnalyticsContent } from 'app/model/AnalyticsContent';
import { SortableElement } from 'app/model/SortableElement';
import { AnalyticsDataService } from 'app/services/analytics-data.service';
import { ContentProviderService } from 'app/services/content-provider.service';
import { HttpClientService } from 'app/services/http-client.service';
import { SortableKpisService } from 'app/services/sortable-kpis.service';
import { CalculatorPreferences, UserPreferences } from 'app/model/UserPreferences';
import { CalculatorAnalytics } from 'app/model/CalculatorAnalytics';
import { AnalyticsKpi } from 'app/model/AnalyticsKpi';
@Component({
  selector: 'app-owners-lounge',
  templateUrl: './owners-lounge.component.html',
  styleUrls: ['./owners-lounge.component.scss']
})
export class OwnersLoungeComponent implements OnInit {
  ownerCalculators: CalculatorAnalytics[];
  ownerId: string;
  isCalculatorsListVisible: boolean;
  analyticsContents: AnalyticsContent;
  userPreferences: UserPreferences;
  constructor(private cps: ContentProviderService, private ads: AnalyticsDataService, private sks: SortableKpisService,
    private httpClientService: HttpClientService) {
    this.ownerId = this.ads.ownerId;
    // @TODO
    this.httpClientService.get('/preference/calculator', [{ key: 'userId', value: this.ownerId }]).subscribe(response => {
      if (response === null) {
        localStorage.userPreferences = JSON.stringify({ userId: this.ownerId, calculators: [] });
      } else {
        localStorage.userPreferences = JSON.stringify(response);
      }
      this.userPreferences = JSON.parse(localStorage.userPreferences);
    });
    this.cps.getContentType('calculator_card').then((result) => {
      this.ownerCalculators = this.ads.mapCalculators(result);
      if (this.userPreferences.calculators.length > 0) {
        this.displayCalculatorsAsPerPreferences();
      }
      this.ownerCalculators[0].isVisible = true;
    });
    this.analyticsContents = this.ads.analyticsContents;
  }

  ngOnInit() {
  }

  displayCalculatorsAsPerPreferences() {
    const sortedCalculators: CalculatorAnalytics[] = [];
    if (this.userPreferences.calculators.length === this.ownerCalculators.length) {
      for (const calcPreferences of this.userPreferences.calculators) {
        for (const calculator of this.ownerCalculators) {
          if (calculator.segmentId === calcPreferences.segmentId) {
            const swappableCalculator = calculator;
            //@ todo for kpi prefernces
            if (calcPreferences.kpisList) {
              console.log('segment id:', calculator.segmentId);
              this.setInitialKpiPreferences(calculator.kpis, calcPreferences.kpisList);
            }
            sortedCalculators.push(swappableCalculator);
          }
        }
      }
    }
    this.ownerCalculators = sortedCalculators;
  }

  setInitialKpiPreferences(kpis, kpiPreferences) {
    console.log('setInitialKpiPreferences');
    console.log('kpi list : ', kpis);
    console.log('kpi pref :', kpiPreferences);
    const sortedKpis: AnalyticsKpi[] = [];
    for (const kpiPref of kpiPreferences) {
      for (const kpi of kpis) {
        if ((kpi.title === kpiPref.title)) {
          const swapableKpi = kpi;
          if (kpiPref.isVisible) {
            swapableKpi.isVisible = kpiPref.isVisible;
          }
          sortedKpis.push(swapableKpi);
        }
      }
    }
    kpis = sortedKpis;
  }
  mapCalculators(calculatorEntries: any[]) {
    // @TODO will removed after owner mapping
    const calculatorEntry = calculatorEntries.splice(0, 5);
    Promise.all(calculatorEntry.map((calculator) => {
      this.ads.fetchData(this.analyticsContents.daysCount, calculator.segment_id).then((result) => {
      });
    }));
    this.ownerCalculators = calculatorEntry.map(calculator => {
      return {
        ownerId: this.ownerId,
        segmentId: calculator.segment_id,
        title: calculator.title,
        index: calculator.index,
        uid: calculator.uid,
        kpis: [...this.analyticsContents.kpis]
      };
    });
    this.ownerCalculators[0].isVisible = true;
  }


  showCalculatorsList() {
    window.scrollTo(0, 0);
    this.isCalculatorsListVisible = !this.isCalculatorsListVisible;
    this.ownerCalculators.map((calculator) => {
      if (calculator.isVisible === true) {
        calculator.isVisible = false;
        return calculator;
      }
    });
  }

  updateCalculatorsSequence(updatedSortingList: SortableElement[]) {
    const localUserPreferences: UserPreferences = JSON.parse(localStorage.userPreferences);
    this.userPreferences.calculators = [];
    for (const listItem of updatedSortingList) {
      const calcPreferences: CalculatorPreferences = { segmentId: listItem.segmentId };
      if (localUserPreferences.calculators) {
        localUserPreferences.calculators.map(calculatorPreferences => {
          if (listItem.segmentId === calculatorPreferences.segmentId) {
            if (calculatorPreferences.kpisList) {
              calcPreferences.kpisList = calculatorPreferences.kpisList;
            }
          }
        });
      }
      this.userPreferences.calculators.push(calcPreferences);
    }
    localStorage.userPreferences = JSON.stringify(this.userPreferences);
    this.httpClientService.post('/preference/calculator', this.userPreferences).subscribe(
      response => {
        console.log('Updated preferences successfully!');
      }, error => {
        console.error(error);
      });
  }
}
